// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateAuthorInput represents a mutation input for creating authors.
type CreateAuthorInput struct {
	Name    string
	Email   string
	BookIDs []int
}

// Mutate applies the CreateAuthorInput on the AuthorMutation builder.
func (i *CreateAuthorInput) Mutate(m *AuthorMutation) {
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAuthorInput on the AuthorCreate builder.
func (c *AuthorCreate) SetInput(i CreateAuthorInput) *AuthorCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateBookInput represents a mutation input for creating books.
type CreateBookInput struct {
	Title           string
	Genre           string
	PublicationDate string
	Isbn            string
	CreatedAt       *time.Time
	AuthorID        *int
}

// Mutate applies the CreateBookInput on the BookMutation builder.
func (i *CreateBookInput) Mutate(m *BookMutation) {
	m.SetTitle(i.Title)
	m.SetGenre(i.Genre)
	m.SetPublicationDate(i.PublicationDate)
	m.SetIsbn(i.Isbn)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
}

// SetInput applies the change-set in the CreateBookInput on the BookCreate builder.
func (c *BookCreate) SetInput(i CreateBookInput) *BookCreate {
	i.Mutate(c.Mutation())
	return c
}
